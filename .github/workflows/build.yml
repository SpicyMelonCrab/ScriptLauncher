name: Build and Release

on:
    push:
        tags:
            - 'v*.*.*' # Trigger on version tags like v1.0.0

permissions:
    contents: write
    packages: write
    actions: read

jobs:
    build_desktop:
        name: Build Desktop on ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [windows-latest, macos-latest, ubuntu-latest]
        steps:
            - uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            - name: Install Yarn v4
              run: corepack enable && corepack prepare yarn@4.6.0 --activate

            - name: Install dependencies
              run: yarn install --immutable

            - name: Clear Electron Builder Cache (Windows)
              if: runner.os == 'Windows'
              run: |
                  rm -rf ~/.cache/electron-builder
                  rm -rf "C:\Users\runneradmin\AppData\Local\electron-builder\Cache"
              shell: bash

            # macOS-specific steps for code signing and notarization
            - name: Import Apple Developer Certificate (macOS only)
              if: matrix.os == 'macos-latest'
              env:
                  DEVELOPER_ID_CERT: ${{ secrets.DEVELOPER_ID_CERT }}
                  DEVELOPER_ID_CERT_PASSWORD: ${{ secrets.DEVELOPER_ID_CERT_PASSWORD }}
              run: |
                  echo "$DEVELOPER_ID_CERT" | base64 --decode > developer_id_certificate.p12
                  security create-keychain -p "" build.keychain
                  security default-keychain -s build.keychain
                  security unlock-keychain -p "" build.keychain
                  security import developer_id_certificate.p12 -k build.keychain -P "$DEVELOPER_ID_CERT_PASSWORD" -T /usr/bin/codesign
                  security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

            - name: List Certificates in Keychain (macOS only)
              if: matrix.os == 'macos-latest'
              run: security find-identity -v -p codesigning

            - name: Compile TypeScript
              run: yarn build

            - name: Build for Desktop (Windows)
              if: runner.os == 'Windows'
              run: yarn electron-builder --win portable --publish=never --config.nsis=false

            - name: Build for Desktop (macOS)
              if: runner.os == 'macOS'
              run: yarn electron-builder --mac --publish=never
              env:
                  DEBUG: electron-notarize*
                  APPLE_ID: ${{ secrets.APPLE_ID }}
                  APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
                  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

            - name: Build for Desktop (Linux)
              if: runner.os == 'Linux'
              run: yarn electron-builder --linux --publish=never

            - name: Upload Desktop Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ScriptLauncher-desktop-${{ github.ref_name }}
                  path: dist/*

    build_rpi:
        name: Build for Raspberry Pi (ARM64)
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            - name: Install Yarn v4
              run: corepack enable && corepack prepare yarn@4.6.0 --activate

            - name: Install dependencies
              run: yarn install --immutable

            - name: Ensure electron-builder is in PATH
              run: echo "$(yarn bin)" >> $GITHUB_PATH

            - name: Compile TypeScript
              run: yarn build

            - name: Build Electron App for ARM64
              run: |
                  yarn electron-builder --linux --arm64 --publish=never || (echo "‚ùå ARM64 build failed!" && exit 1)

            - name: Upload ARM64 Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ScriptLauncher-rpi-${{ github.ref_name }}
                  path: dist/*

    release:
        name: Create GitHub Release
        runs-on: ubuntu-latest
        needs: [build_desktop, build_rpi]
        steps:
            - name: Download All Artifacts
              uses: actions/download-artifact@v4
              with:
                  path: release

            - name: List All Release Files (Debugging)
              run: ls -lah release/

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ github.ref_name }}
                  name: 'ScriptLauncher v${{ github.ref_name }}'
                  body: "Official release of ScriptLauncher v${{ github.ref_name}}.\n\nDownload the appropriate version for your OS below."
                  files: release/**/*
                  draft: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
